/******************************************************************************
* Copyright (c) 2018  Fraunhofer FOKUS
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*		Avdoot Chalke
*		Sascha Hackel
*		Axel Rennoch 
******************************************************************************/

module OpcUa_Test {

  import from OpcUa_Functions all;
  import from OpcUa_Types_Binary all;
  import from OpcUa_Templates_Binary all;
  import from OpcUa_Message_Templates all;
  import from OpcUa_Testfunction all;


 testcase TC_HELLO_MSG_SERVER() runs on SendReceiveComp system SendReceiveComp
  {
    map(self: testPort, system:testPort);
    f_tc_hello_msg_server();
    unmap(self: testPort, system: testPort); 
  }
 
  testcase TC_HELLO_MSG_SERVER_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_hello_msg_server_1();
    unmap(self: testPort, system: testPort); 
       
  }
  
   testcase TC_OPEN_SECURE_CHANNEL() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_open_secure_channel();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_OPEN_SECURE_CHANNEL_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_open_secure_channel_1();
    unmap(self: testPort, system: testPort);  
  }
  
    testcase TC_OPEN_SECURE_CHANNEL_2() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_open_secure_channel_2();
    unmap(self: testPort, system: testPort);          
  }
  

 testcase TC_FIND_SERVERS() runs on SendReceiveComp 
 {
    map(self: testPort, system:testPort);
    f_tc_find_servers();
    unmap(self: testPort, system: testPort); 
 }
  

  testcase TC_CREATE_SESSION() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session();
    unmap(self: testPort, system: testPort);     
  }
    
  testcase TC_CREATE_SESSION_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_1();
    unmap(self: testPort, system: testPort);         
  }
  
  testcase TC_CREATE_SESSION_2() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_2();
    unmap(self: testPort, system: testPort);             
  }
  
  testcase TC_CREATE_SESSION_3() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_3();
    unmap(self: testPort, system: testPort);       
  }
  
  testcase TC_CREATE_SESSION_4() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_4();
    unmap(self: testPort, system: testPort);       
  }
  
  testcase TC_CREATE_SESSION_5() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_5();
    unmap(self: testPort, system: testPort);       
  }
  
  testcase TC_CREATE_SESSION_6() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_6();
    unmap(self: testPort, system: testPort);          
  }
  
  testcase TC_CREATE_SESSION_7() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_7();
    unmap(self: testPort, system: testPort);         
  }
  
  testcase TC_CREATE_SESSION_8() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_create_session_8();
    unmap(self: testPort, system: testPort);        
  }
     
 testcase TC_GET_ENDPOINTS() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_get_endpoints();
    unmap(self: testPort, system: testPort);     
  }
  
 
 testcase TC_ACTIVE_SESSION() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_activate_session();
    unmap(self: testPort, system: testPort); 
  }
  
   testcase TC_ACTIVE_SESSION_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_activate_session_1();
    unmap(self: testPort, system: testPort); 
  }
  
   testcase TC_ACTIVE_SESSION_2() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_activate_session_2();
    unmap(self: testPort, system: testPort);       
  }
 
 testcase TC_CLOSE_SECURE_CHANNEL() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_close_secure_channel();
    unmap(self: testPort, system: testPort);   
  }
 
 testcase TC_CLOSE_SESSION() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_close_session();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_BROWSE_REQUEST() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_browse_request();
    unmap(self: testPort, system: testPort); 
  }
 
 testcase TC_BROWSE_REQUEST_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_browse_request_1();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_BROWSE_REQUEST_2() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_browse_request_2();
    unmap(self: testPort, system: testPort); 
  }
 
 testcase TC_BROWSE_REQUEST_3() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_browse_request_3();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_BROWSE_REQUEST_4() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_browse_request_4();
    unmap(self: testPort, system: testPort); 
  }
 
  testcase TC_TRANSLATE_BROWSE_PATHS_TO_NODE() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_translate_browse_paths_to_node();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_TRANSLATE_BROWSE_PATHS_TO_NODE_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_translate_browse_paths_to_node_1();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_READ_REQUEST() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_read_request();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_READ_REQUEST_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_read_request_1();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_READ_REQUEST_2() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_read_request_2();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_READ_REQUEST_3() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_read_request_3();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_READ_REQUEST_4() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_read_request_4();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_HISTORY_READ() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_history_read();
    unmap(self: testPort, system: testPort); 
  }
  
  testcase TC_HISTORY_READ_1() runs on SendReceiveComp 
  {
    map(self: testPort, system:testPort);
    f_tc_history_read_1();
    unmap(self: testPort, system: testPort); 
  }
  
  control 
  {
//       execute (TC_HELLO_MSG_SERVER());
//       execute (TC_HELLO_MSG_SERVER_1());
//       execute (TC_FIND_SERVERS());
//       execute (TC_OPEN_SECURE_CHANNEL());
//       execute (TC_OPEN_SECURE_CHANNEL_1());
//       execute (TC_OPEN_SECURE_CHANNEL_2());
//       execute (TC_CREATE_SESSION());
//       execute (TC_CREATE_SESSION_1());
//       execute (TC_CREATE_SESSION_2());
//       execute (TC_CREATE_SESSION_3());
//       execute (TC_CREATE_SESSION_4());
//       execute (TC_CREATE_SESSION_5());
//       execute (TC_CREATE_SESSION_6());
//       execute (TC_CREATE_SESSION_7());
//       execute (TC_CREATE_SESSION_8());
//       execute (TC_GET_ENDPOINTS());
         execute (TC_ACTIVE_SESSION());
//       execute (TC_ACTIVE_SESSION_1());
//       execute (TC_ACTIVE_SESSION_2());
//       execute (TC_CLOSE_SECURE_CHANNEL()); 
//       execute (TC_CLOSE_SESSION());
//       execute (TC_BROWSE_REQUEST());
//       execute (TC_BROWSE_REQUEST_1());
//       execute (TC_BROWSE_REQUEST_2());
//       execute (TC_BROWSE_REQUEST_3());
//       execute (TC_BROWSE_REQUEST_4());
//       execute(TC_TRANSLATE_BROWSE_PATHS_TO_NODE());
//       execute(TC_TRANSLATE_BROWSE_PATHS_TO_NODE_1());
//       execute(TC_readRequest());
//       execute(TC_READ_REQUEST_1());
//       execute(TC_READ_REQUEST_2());
//       execute(TC_READ_REQUEST_3());
//       execute(TC_READ_REQUEST_4());
//       execute(TC_HISTORY_READ());
//       execute(TC_HISTORY_READ_1());
  }
}

