// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for AvdootChalke (avdootchalke@avdootchalke-VirtualBox) on Thu Jul 26 15:22:27 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TCCConversion_Functions.hh"

namespace TCCConversion__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const OCTETSTRING os_0(0, NULL);
static const CHARSTRING cs_0(0, NULL),
cs_7('\t'),
cs_6('\n'),
cs_5('\r'),
cs_4(' '),
cs_8('0'),
cs_2(':'),
cs_1('['),
cs_3(']');
static const unsigned char module_checksum[] = { 0x0b, 0x82, 0x77, 0xf8, 0x42, 0x0f, 0xfc, 0x14, 0x8b, 0xf5, 0x9e, 0xe0, 0x03, 0x85, 0xeb, 0x0e };

/* Global variable definitions */

// No XER for TCC__Conversion__ch__list
const TTCN_Typedescriptor_t TCC__Conversion__ch__list_descr_ = { "@TCCConversion_Functions.TCC_Conversion_ch_list", NULL, NULL, NULL, NULL, NULL, NULL, &CHARSTRING_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TCC__Conversion__ch__list_0_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t TCC__Conversion__ch__list_0_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t TCC__Conversion__ch__list_0_descr_ = { "@TCCConversion_Functions.TCC_Conversion_ch_list.<oftype>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &TCC__Conversion__ch__list_0_xer_, &TCC__Conversion__ch__list_0_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static TCC__Conversion__ch__list const_TCC__Converion__ch__empty__list;
const TCC__Conversion__ch__list& TCC__Converion__ch__empty__list = const_TCC__Converion__ch__empty__list;
static INTEGER const_f__strstr_offset_defval;
const INTEGER& f__strstr_offset_defval = const_f__strstr_offset_defval;
static INTEGER const_f__strstr__oct_offset_defval;
const INTEGER& f__strstr__oct_offset_defval = const_f__strstr__oct_offset_defval;
TTCN_Module module_object("TCCConversion_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, "", 0U, 30U, 0U, 99U, "", 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

CHARSTRING f__unichar2charstr(const UNIVERSAL_CHARSTRING& p__unichar)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 93, TTCN_Location::LOCATION_FUNCTION, "f_unichar2charstr");
current_location.update_lineno(95);
/* TCCConversion_Functions.ttcn, line 95 */
CHARSTRING vl__char(cs_0);
current_location.update_lineno(97);
/* TCCConversion_Functions.ttcn, line 97 */
if ((p__unichar.lengthof() == 0)) {
current_location.update_lineno(97);
/* TCCConversion_Functions.ttcn, line 97 */
return cs_0;
}
{
current_location.update_lineno(98);
/* TCCConversion_Functions.ttcn, line 98 */
INTEGER i(0);
current_location.update_lineno(98);
/* TCCConversion_Functions.ttcn, line 98 */
for ( ; ; ) {
current_location.update_lineno(98);
/* TCCConversion_Functions.ttcn, line 98 */
if (!(i < p__unichar.lengthof())) break;
current_location.update_lineno(100);
/* TCCConversion_Functions.ttcn, line 100 */
{
CHARSTRING tmp_0;
tmp_0 = (vl__char + int2char(unichar2int(const_cast< const UNIVERSAL_CHARSTRING&>(p__unichar)[i])));
vl__char = tmp_0;
}
current_location.update_lineno(98);
/* TCCConversion_Functions.ttcn, line 98 */
{
INTEGER tmp_1;
++i;
}
}
}
current_location.update_lineno(102);
/* TCCConversion_Functions.ttcn, line 102 */
return vl__char;
}

UNIVERSAL_CHARSTRING f__charstr2unichar(const CHARSTRING& p__char)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 125, TTCN_Location::LOCATION_FUNCTION, "f_charstr2unichar");
current_location.update_lineno(127);
/* TCCConversion_Functions.ttcn, line 127 */
UNIVERSAL_CHARSTRING vl__unichar(cs_0);
current_location.update_lineno(129);
/* TCCConversion_Functions.ttcn, line 129 */
if ((p__char.lengthof() == 0)) {
current_location.update_lineno(129);
/* TCCConversion_Functions.ttcn, line 129 */
return cs_0;
}
{
current_location.update_lineno(130);
/* TCCConversion_Functions.ttcn, line 130 */
INTEGER i(0);
current_location.update_lineno(130);
/* TCCConversion_Functions.ttcn, line 130 */
for ( ; ; ) {
current_location.update_lineno(130);
/* TCCConversion_Functions.ttcn, line 130 */
if (!(i < p__char.lengthof())) break;
current_location.update_lineno(132);
/* TCCConversion_Functions.ttcn, line 132 */
{
UNIVERSAL_CHARSTRING tmp_2;
tmp_2 = (vl__unichar + int2unichar(char2int(const_cast< const CHARSTRING&>(p__char)[i])));
vl__unichar = tmp_2;
}
current_location.update_lineno(130);
/* TCCConversion_Functions.ttcn, line 130 */
{
INTEGER tmp_3;
++i;
}
}
}
current_location.update_lineno(134);
/* TCCConversion_Functions.ttcn, line 134 */
return vl__unichar;
}

CHARSTRING f__replaceFirstOccurenceOfSubstring(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 158, TTCN_Location::LOCATION_FUNCTION, "f_replaceFirstOccurenceOfSubstring");
current_location.update_lineno(164);
/* TCCConversion_Functions.ttcn, line 164 */
INTEGER i(f__strstr(parInStr, parSubStrA, f__strstr_offset_defval));
current_location.update_lineno(165);
/* TCCConversion_Functions.ttcn, line 165 */
CHARSTRING OutStr;
current_location.update_lineno(167);
/* TCCConversion_Functions.ttcn, line 167 */
if ((i == -1)) {
current_location.update_lineno(168);
/* TCCConversion_Functions.ttcn, line 168 */
return parInStr;
}
current_location.update_lineno(170);
/* TCCConversion_Functions.ttcn, line 170 */
OutStr = ((substr(parInStr, 0, i) + parSubStrB) + substr(parInStr, (i + parSubStrA.lengthof()), ((parInStr.lengthof() - i) - parSubStrA.lengthof())));
current_location.update_lineno(175);
/* TCCConversion_Functions.ttcn, line 175 */
return OutStr;
}

CHARSTRING f__replaceEveryOccurenceOfSubstring(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 200, TTCN_Location::LOCATION_FUNCTION, "f_replaceEveryOccurenceOfSubstring");
current_location.update_lineno(205);
/* TCCConversion_Functions.ttcn, line 205 */
INTEGER startRegion(0);
current_location.update_lineno(206);
/* TCCConversion_Functions.ttcn, line 206 */
INTEGER i(f__strstr(parInStr, parSubStrA, f__strstr_offset_defval));
current_location.update_lineno(207);
/* TCCConversion_Functions.ttcn, line 207 */
CHARSTRING OutStr(cs_0);
current_location.update_lineno(208);
/* TCCConversion_Functions.ttcn, line 208 */
INTEGER vl__sizeA(parSubStrA.lengthof());
for ( ; ; ) {
current_location.update_lineno(210);
/* TCCConversion_Functions.ttcn, line 210 */
if (!(i != -1)) break;
current_location.update_lineno(212);
/* TCCConversion_Functions.ttcn, line 212 */
{
CHARSTRING tmp_5;
tmp_5 = ((OutStr + substr(parInStr, startRegion, (i - startRegion))) + parSubStrB);
OutStr = tmp_5;
}
current_location.update_lineno(215);
/* TCCConversion_Functions.ttcn, line 215 */
startRegion = (i + vl__sizeA);
current_location.update_lineno(216);
/* TCCConversion_Functions.ttcn, line 216 */
i = f__strstr(parInStr, parSubStrA, startRegion);
}
current_location.update_lineno(219);
/* TCCConversion_Functions.ttcn, line 219 */
INTEGER remainderSize((parInStr.lengthof() - startRegion));
current_location.update_lineno(220);
/* TCCConversion_Functions.ttcn, line 220 */
if ((remainderSize > 0)) {
current_location.update_lineno(221);
/* TCCConversion_Functions.ttcn, line 221 */
{
CHARSTRING tmp_8;
tmp_8 = (OutStr + substr(parInStr, startRegion, remainderSize));
OutStr = tmp_8;
}
}
current_location.update_lineno(224);
/* TCCConversion_Functions.ttcn, line 224 */
return OutStr;
}

CHARSTRING f__replaceFirstOccurenceOfPattern(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 247, TTCN_Location::LOCATION_FUNCTION, "f_replaceFirstOccurenceOfPattern");
current_location.update_lineno(253);
/* TCCConversion_Functions.ttcn, line 253 */
CHARSTRING v__SubStrA;
current_location.update_lineno(255);
/* TCCConversion_Functions.ttcn, line 255 */
v__SubStrA = regexp(parInStr, parSubStrA, 0, FALSE);
current_location.update_lineno(256);
/* TCCConversion_Functions.ttcn, line 256 */
if ((v__SubStrA != cs_0)) {
current_location.update_lineno(257);
/* TCCConversion_Functions.ttcn, line 257 */
return f__replaceFirstOccurenceOfSubstring(parInStr, v__SubStrA, parSubStrB);
}
else {
current_location.update_lineno(260);
/* TCCConversion_Functions.ttcn, line 260 */
return parInStr;
}
}

CHARSTRING f__replaceEveryOccurenceOfPattern(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 286, TTCN_Location::LOCATION_FUNCTION, "f_replaceEveryOccurenceOfPattern");
current_location.update_lineno(291);
/* TCCConversion_Functions.ttcn, line 291 */
CHARSTRING OutStr;
current_location.update_lineno(291);
/* TCCConversion_Functions.ttcn, line 291 */
CHARSTRING v__SubStrA;
current_location.update_lineno(292);
/* TCCConversion_Functions.ttcn, line 292 */
CHARSTRING MyPattern(parSubStrA);
current_location.update_lineno(294);
/* TCCConversion_Functions.ttcn, line 294 */
OutStr = parInStr;
current_location.update_lineno(295);
/* TCCConversion_Functions.ttcn, line 295 */
v__SubStrA = regexp(OutStr, MyPattern, 0, FALSE);
for ( ; ; ) {
current_location.update_lineno(297);
/* TCCConversion_Functions.ttcn, line 297 */
if (!(v__SubStrA != cs_0)) break;
current_location.update_lineno(299);
/* TCCConversion_Functions.ttcn, line 299 */
OutStr = f__replaceEveryOccurenceOfSubstring(OutStr, v__SubStrA, parSubStrB);
current_location.update_lineno(300);
/* TCCConversion_Functions.ttcn, line 300 */
v__SubStrA = regexp(OutStr, MyPattern, 0, FALSE);
}
current_location.update_lineno(303);
/* TCCConversion_Functions.ttcn, line 303 */
return OutStr;
}

TCC__Conversion__ch__list f__substr__all__tokens(const CHARSTRING& str, const CHARSTRING& begin__token, const CHARSTRING& end__token)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 478, TTCN_Location::LOCATION_FUNCTION, "f_substr_all_tokens");
current_location.update_lineno(482);
/* TCCConversion_Functions.ttcn, line 482 */
TCC__Conversion__ch__list result(NULL_VALUE);
current_location.update_lineno(483);
/* TCCConversion_Functions.ttcn, line 483 */
INTEGER startIndex(0);
current_location.update_lineno(484);
/* TCCConversion_Functions.ttcn, line 484 */
INTEGER endIndex(0);
current_location.update_lineno(485);
/* TCCConversion_Functions.ttcn, line 485 */
BOOLEAN found(TRUE);
current_location.update_lineno(487);
/* TCCConversion_Functions.ttcn, line 487 */
{
boolean tmp_14;
tmp_14 = (begin__token.lengthof() == 0);
if (tmp_14) tmp_14 = (end__token.lengthof() == 0);
if (tmp_14) {
current_location.update_lineno(488);
/* TCCConversion_Functions.ttcn, line 488 */
result[0] = str;
current_location.update_lineno(489);
/* TCCConversion_Functions.ttcn, line 489 */
return result;
}
}
for ( ; ; ) {
current_location.update_lineno(492);
/* TCCConversion_Functions.ttcn, line 492 */
if (!found) break;
current_location.update_lineno(494);
/* TCCConversion_Functions.ttcn, line 494 */
startIndex = f__strstr(str, begin__token, startIndex);
current_location.update_lineno(495);
/* TCCConversion_Functions.ttcn, line 495 */
if ((startIndex > -1)) {
current_location.update_lineno(498);
/* TCCConversion_Functions.ttcn, line 498 */
{
INTEGER tmp_17;
tmp_17 = (startIndex + begin__token.lengthof());
startIndex = tmp_17;
}
current_location.update_lineno(500);
/* TCCConversion_Functions.ttcn, line 500 */
if ((end__token.lengthof() == 0)) {
current_location.update_lineno(501);
/* TCCConversion_Functions.ttcn, line 501 */
endIndex = str.lengthof();
}
else {
current_location.update_lineno(503);
/* TCCConversion_Functions.ttcn, line 503 */
endIndex = f__strstr(str, end__token, startIndex);
}
current_location.update_lineno(506);
/* TCCConversion_Functions.ttcn, line 506 */
if ((endIndex > -1)) {
current_location.update_lineno(507);
/* TCCConversion_Functions.ttcn, line 507 */
result[result.size_of()] = substr(str, startIndex, (endIndex - startIndex));
current_location.update_lineno(508);
/* TCCConversion_Functions.ttcn, line 508 */
startIndex = (endIndex + end__token.lengthof());
}
else {
current_location.update_lineno(510);
/* TCCConversion_Functions.ttcn, line 510 */
found = FALSE;
}
}
else {
current_location.update_lineno(514);
/* TCCConversion_Functions.ttcn, line 514 */
found = FALSE;
}
}
current_location.update_lineno(518);
/* TCCConversion_Functions.ttcn, line 518 */
return result;
}

TCC__Conversion__ch__list f__substr__all__tokens__oct(const OCTETSTRING& str, const OCTETSTRING& begin__token, const OCTETSTRING& end__token)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 554, TTCN_Location::LOCATION_FUNCTION, "f_substr_all_tokens_oct");
current_location.update_lineno(558);
/* TCCConversion_Functions.ttcn, line 558 */
TCC__Conversion__ch__list result(NULL_VALUE);
current_location.update_lineno(559);
/* TCCConversion_Functions.ttcn, line 559 */
OCTETSTRING token(os_0);
current_location.update_lineno(560);
/* TCCConversion_Functions.ttcn, line 560 */
INTEGER startIndex(0);
current_location.update_lineno(561);
/* TCCConversion_Functions.ttcn, line 561 */
INTEGER endIndex(0);
current_location.update_lineno(562);
/* TCCConversion_Functions.ttcn, line 562 */
BOOLEAN found(TRUE);
for ( ; ; ) {
current_location.update_lineno(563);
/* TCCConversion_Functions.ttcn, line 563 */
if (!found) break;
current_location.update_lineno(565);
/* TCCConversion_Functions.ttcn, line 565 */
startIndex = f__strstr__oct(str, begin__token, startIndex);
current_location.update_lineno(566);
/* TCCConversion_Functions.ttcn, line 566 */
if ((startIndex > -1)) {
current_location.update_lineno(568);
/* TCCConversion_Functions.ttcn, line 568 */
{
INTEGER tmp_25;
tmp_25 = (startIndex + begin__token.lengthof());
startIndex = tmp_25;
}
current_location.update_lineno(569);
/* TCCConversion_Functions.ttcn, line 569 */
endIndex = f__strstr__oct(str, end__token, startIndex);
current_location.update_lineno(571);
/* TCCConversion_Functions.ttcn, line 571 */
if ((endIndex > -1)) {
current_location.update_lineno(572);
/* TCCConversion_Functions.ttcn, line 572 */
token = substr(str, startIndex, (endIndex - startIndex));
current_location.update_lineno(573);
/* TCCConversion_Functions.ttcn, line 573 */
if ((!(f__oct2char__safe(token, result[result.size_of()])))) {
current_location.update_lineno(574);
/* TCCConversion_Functions.ttcn, line 574 */
return NULL_VALUE;
}
current_location.update_lineno(576);
/* TCCConversion_Functions.ttcn, line 576 */
startIndex = (endIndex + end__token.lengthof());
}
else {
current_location.update_lineno(578);
/* TCCConversion_Functions.ttcn, line 578 */
found = FALSE;
}
}
else {
current_location.update_lineno(582);
/* TCCConversion_Functions.ttcn, line 582 */
found = FALSE;
}
}
current_location.update_lineno(586);
/* TCCConversion_Functions.ttcn, line 586 */
return result;
}

OCTETSTRING f__OctetIpv4(const CHARSTRING& pl__ip)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 666, TTCN_Location::LOCATION_FUNCTION, "f_OctetIpv4");
current_location.update_lineno(667);
/* TCCConversion_Functions.ttcn, line 667 */
return f__convertIPAddrToBinary(pl__ip);
}

CHARSTRING f__IPv6CreateLiteral(const CHARSTRING& pl__ip)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 758, TTCN_Location::LOCATION_FUNCTION, "f_IPv6CreateLiteral");
current_location.update_lineno(763);
/* TCCConversion_Functions.ttcn, line 763 */
CHARSTRING vl__ipAddress(pl__ip);
current_location.update_lineno(764);
/* TCCConversion_Functions.ttcn, line 764 */
if ((const_cast< const CHARSTRING&>(vl__ipAddress)[0] != cs_1)) {
{
current_location.update_lineno(768);
/* TCCConversion_Functions.ttcn, line 768 */
INTEGER i(0);
current_location.update_lineno(768);
/* TCCConversion_Functions.ttcn, line 768 */
for ( ; ; ) {
current_location.update_lineno(768);
/* TCCConversion_Functions.ttcn, line 768 */
if (!(i < 5)) break;
current_location.update_lineno(770);
/* TCCConversion_Functions.ttcn, line 770 */
if ((const_cast< const CHARSTRING&>(vl__ipAddress)[i] == cs_2)) {
current_location.update_lineno(772);
/* TCCConversion_Functions.ttcn, line 772 */
{
CHARSTRING tmp_31;
tmp_31 = ((cs_1 + vl__ipAddress) + cs_3);
vl__ipAddress = tmp_31;
}
current_location.update_lineno(773);
/* TCCConversion_Functions.ttcn, line 773 */
break;
}
current_location.update_lineno(768);
/* TCCConversion_Functions.ttcn, line 768 */
{
INTEGER tmp_32;
++i;
}
}
}
}
current_location.update_lineno(778);
/* TCCConversion_Functions.ttcn, line 778 */
return vl__ipAddress;
}

BOOLEAN f__isWhiteSpace(const CHARSTRING& pl__str)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 825, TTCN_Location::LOCATION_FUNCTION, "f_isWhiteSpace");
current_location.update_lineno(826);
/* TCCConversion_Functions.ttcn, line 826 */
INTEGER vl__size(pl__str.lengthof());
current_location.update_lineno(827);
/* TCCConversion_Functions.ttcn, line 827 */
if ((vl__size == 0)) {
current_location.update_lineno(828);
/* TCCConversion_Functions.ttcn, line 828 */
return FALSE;
}
{
current_location.update_lineno(831);
/* TCCConversion_Functions.ttcn, line 831 */
INTEGER j(0);
current_location.update_lineno(831);
/* TCCConversion_Functions.ttcn, line 831 */
for ( ; ; ) {
current_location.update_lineno(831);
/* TCCConversion_Functions.ttcn, line 831 */
if (!(j < vl__size)) break;
{
const CHARSTRING &tmp_34 = const_cast< const CHARSTRING&>(pl__str)[j];
current_location.update_lineno(833);
/* TCCConversion_Functions.ttcn, line 833 */
if(tmp_34 == cs_4) goto tmp_33_0;
current_location.update_lineno(834);
/* TCCConversion_Functions.ttcn, line 834 */
if(tmp_34 == cs_5) goto tmp_33_1;
current_location.update_lineno(835);
/* TCCConversion_Functions.ttcn, line 835 */
if(tmp_34 == cs_6) goto tmp_33_2;
current_location.update_lineno(836);
/* TCCConversion_Functions.ttcn, line 836 */
if(tmp_34 == cs_7) goto tmp_33_3;
goto tmp_33_4;
tmp_33_0:
{
goto tmp_33_end;
}
tmp_33_1:
{
goto tmp_33_end;
}
tmp_33_2:
{
goto tmp_33_end;
}
tmp_33_3:
{
goto tmp_33_end;
}
tmp_33_4:
{
current_location.update_lineno(837);
/* TCCConversion_Functions.ttcn, line 837 */
return FALSE;
goto tmp_33_end;
}
tmp_33_end: /* empty */;
}
current_location.update_lineno(831);
/* TCCConversion_Functions.ttcn, line 831 */
{
INTEGER tmp_35;
++j;
}
}
}
current_location.update_lineno(840);
/* TCCConversion_Functions.ttcn, line 840 */
return TRUE;
}

CHARSTRING f__stripWhitespaces(const CHARSTRING& pl__str)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 863, TTCN_Location::LOCATION_FUNCTION, "f_stripWhitespaces");
current_location.update_lineno(864);
/* TCCConversion_Functions.ttcn, line 864 */
INTEGER vl__begin(0);
current_location.update_lineno(864);
/* TCCConversion_Functions.ttcn, line 864 */
INTEGER vl__end(pl__str.lengthof());
for ( ; ; ) {
current_location.update_lineno(865);
/* TCCConversion_Functions.ttcn, line 865 */
{
boolean tmp_36;
tmp_36 = (vl__begin < vl__end);
if (tmp_36) tmp_36 = f__isWhiteSpace(const_cast< const CHARSTRING&>(pl__str)[vl__begin]);
if (!tmp_36) break;
}
current_location.update_lineno(865);
/* TCCConversion_Functions.ttcn, line 865 */
{
INTEGER tmp_37;
++vl__begin;
}
}
for ( ; ; ) {
current_location.update_lineno(866);
/* TCCConversion_Functions.ttcn, line 866 */
{
boolean tmp_38;
tmp_38 = ((vl__end - 1) >= vl__begin);
if (tmp_38) tmp_38 = f__isWhiteSpace(const_cast< const CHARSTRING&>(pl__str)[(vl__end - 1)]);
if (!tmp_38) break;
}
current_location.update_lineno(866);
/* TCCConversion_Functions.ttcn, line 866 */
{
INTEGER tmp_39;
--vl__end;
}
}
current_location.update_lineno(867);
/* TCCConversion_Functions.ttcn, line 867 */
return substr(pl__str, vl__begin, (vl__end - vl__begin));
}

BOOLEAN f__isInteger(const CHARSTRING& pl__str)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 890, TTCN_Location::LOCATION_FUNCTION, "f_isInteger");
{
current_location.update_lineno(892);
/* TCCConversion_Functions.ttcn, line 892 */
INTEGER vl__i(0);
current_location.update_lineno(892);
/* TCCConversion_Functions.ttcn, line 892 */
for ( ; ; ) {
current_location.update_lineno(892);
/* TCCConversion_Functions.ttcn, line 892 */
if (!(vl__i < pl__str.lengthof())) break;
current_location.update_lineno(893);
/* TCCConversion_Functions.ttcn, line 893 */
{
boolean tmp_40;
tmp_40 = (char2int(const_cast< const CHARSTRING&>(pl__str)[vl__i]) < 48);
if (!tmp_40) tmp_40 = (char2int(const_cast< const CHARSTRING&>(pl__str)[vl__i]) > 57);
if (tmp_40) {
current_location.update_lineno(893);
/* TCCConversion_Functions.ttcn, line 893 */
return FALSE;
}
}
current_location.update_lineno(892);
/* TCCConversion_Functions.ttcn, line 892 */
{
INTEGER tmp_41;
++vl__i;
}
}
}
current_location.update_lineno(895);
/* TCCConversion_Functions.ttcn, line 895 */
if ((pl__str.lengthof() == 0)) {
current_location.update_lineno(895);
/* TCCConversion_Functions.ttcn, line 895 */
return FALSE;
}
current_location.update_lineno(896);
/* TCCConversion_Functions.ttcn, line 896 */
return TRUE;
}

INTEGER f__str2int(const CHARSTRING& pl__str)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 920, TTCN_Location::LOCATION_FUNCTION, "f_str2int");
current_location.update_lineno(921);
/* TCCConversion_Functions.ttcn, line 921 */
INTEGER vl__zeros(0);
for ( ; ; ) {
current_location.update_lineno(923);
/* TCCConversion_Functions.ttcn, line 923 */
{
boolean tmp_42;
tmp_42 = (vl__zeros < pl__str.lengthof());
if (tmp_42) tmp_42 = (const_cast< const CHARSTRING&>(pl__str)[vl__zeros] == cs_8);
if (!tmp_42) break;
}
current_location.update_lineno(923);
/* TCCConversion_Functions.ttcn, line 923 */
{
INTEGER tmp_43;
++vl__zeros;
}
}
current_location.update_lineno(924);
/* TCCConversion_Functions.ttcn, line 924 */
if ((vl__zeros == pl__str.lengthof())) {
current_location.update_lineno(924);
/* TCCConversion_Functions.ttcn, line 924 */
return 0;
}
current_location.update_lineno(925);
/* TCCConversion_Functions.ttcn, line 925 */
return str2int(substr(pl__str, vl__zeros, (pl__str.lengthof() - vl__zeros)));
}

BOOLEAN f__prePadString(const CHARSTRING& pl__string, const CHARSTRING& pl__pad, const INTEGER& pl__length, CHARSTRING& pl__result)
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 956, TTCN_Location::LOCATION_FUNCTION, "f_prePadString");
current_location.update_lineno(959);
/* TCCConversion_Functions.ttcn, line 959 */
if ((pl__length < pl__string.lengthof())) {
current_location.update_lineno(960);
/* TCCConversion_Functions.ttcn, line 960 */
return FALSE;
}
current_location.update_lineno(962);
/* TCCConversion_Functions.ttcn, line 962 */
pl__result = cs_0;
{
current_location.update_lineno(963);
/* TCCConversion_Functions.ttcn, line 963 */
INTEGER vl__i(0);
current_location.update_lineno(963);
/* TCCConversion_Functions.ttcn, line 963 */
for ( ; ; ) {
current_location.update_lineno(963);
/* TCCConversion_Functions.ttcn, line 963 */
if (!(vl__i < (pl__length - pl__string.lengthof()))) break;
current_location.update_lineno(964);
/* TCCConversion_Functions.ttcn, line 964 */
{
CHARSTRING tmp_45;
tmp_45 = (pl__result + const_cast< const CHARSTRING&>(pl__pad)[0]);
pl__result = tmp_45;
}
current_location.update_lineno(963);
/* TCCConversion_Functions.ttcn, line 963 */
{
INTEGER tmp_46;
++vl__i;
}
}
}
current_location.update_lineno(966);
/* TCCConversion_Functions.ttcn, line 966 */
{
CHARSTRING tmp_47;
tmp_47 = (pl__result + pl__string);
pl__result = tmp_47;
}
current_location.update_lineno(967);
/* TCCConversion_Functions.ttcn, line 967 */
return TRUE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TCCConversion_Functions");
module_object.add_function("f_putInLowercase", (genericfunc_t)&f__putInLowercase, NULL);
module_object.add_function("f_putInUppercase", (genericfunc_t)&f__putInUppercase, NULL);
module_object.add_function("f_unichar2charstr", (genericfunc_t)&f__unichar2charstr, NULL);
module_object.add_function("f_charstr2unichar", (genericfunc_t)&f__charstr2unichar, NULL);
module_object.add_function("f_replaceFirstOccurenceOfSubstring", (genericfunc_t)&f__replaceFirstOccurenceOfSubstring, NULL);
module_object.add_function("f_replaceEveryOccurenceOfSubstring", (genericfunc_t)&f__replaceEveryOccurenceOfSubstring, NULL);
module_object.add_function("f_replaceFirstOccurenceOfPattern", (genericfunc_t)&f__replaceFirstOccurenceOfPattern, NULL);
module_object.add_function("f_replaceEveryOccurenceOfPattern", (genericfunc_t)&f__replaceEveryOccurenceOfPattern, NULL);
module_object.add_function("f_addOctetstring", (genericfunc_t)&f__addOctetstring, NULL);
module_object.add_function("f_subOctetstring", (genericfunc_t)&f__subOctetstring, NULL);
module_object.add_function("f_compOctetstring", (genericfunc_t)&f__compOctetstring, NULL);
module_object.add_function("f_substr_token", (genericfunc_t)&f__substr__token, NULL);
module_object.add_function("f_substr_token_oct", (genericfunc_t)&f__substr__token__oct, NULL);
module_object.add_function("f_substr_all_tokens", (genericfunc_t)&f__substr__all__tokens, NULL);
current_location.update_lineno(553);
/* TCCConversion_Functions.ttcn, line 553 */
const_TCC__Converion__ch__empty__list = NULL_VALUE;
module_object.add_function("f_substr_all_tokens_oct", (genericfunc_t)&f__substr__all__tokens__oct, NULL);
module_object.add_function("f_strstr", (genericfunc_t)&f__strstr, NULL);
module_object.add_function("f_strstr_oct", (genericfunc_t)&f__strstr__oct, NULL);
module_object.add_function("f_OctetIpv4", (genericfunc_t)&f__OctetIpv4, NULL);
module_object.add_function("f_convertIPAddrToBinary", (genericfunc_t)&f__convertIPAddrToBinary, NULL);
module_object.add_function("f_convertBinaryToIPAddr", (genericfunc_t)&f__convertBinaryToIPAddr, NULL);
module_object.add_function("f_oct2char_safe", (genericfunc_t)&f__oct2char__safe, NULL);
module_object.add_function("f_IPv6CreateLiteral", (genericfunc_t)&f__IPv6CreateLiteral, NULL);
module_object.add_function("f_isNumber", (genericfunc_t)&f__isNumber, NULL);
module_object.add_function("f_isWhiteSpace", (genericfunc_t)&f__isWhiteSpace, NULL);
module_object.add_function("f_stripWhitespaces", (genericfunc_t)&f__stripWhitespaces, NULL);
module_object.add_function("f_isInteger", (genericfunc_t)&f__isInteger, NULL);
module_object.add_function("f_str2int", (genericfunc_t)&f__str2int, NULL);
module_object.add_function("f_prePadString", (genericfunc_t)&f__prePadString, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("TCCConversion_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TCCConversion_Functions");
const_f__strstr_offset_defval = 0;
const_f__strstr__oct_offset_defval = 0;
}


} /* end of namespace */
