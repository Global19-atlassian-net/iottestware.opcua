// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for AvdootChalke (avdootchalke@avdootchalke-VirtualBox) on Thu Jul 26 15:22:27 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef TCCConversion__Functions_HH
#define TCCConversion__Functions_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef TCCConversion__Functions_HH
#endif

namespace TCCConversion__Functions {

/* Forward declarations of classes */

typedef PreGenRecordOf::PREGEN__RECORD__OF__CHARSTRING TCC__Conversion__ch__list;
typedef PreGenRecordOf::PREGEN__RECORD__OF__CHARSTRING_template TCC__Conversion__ch__list_template;

} /* end of namespace */

#ifndef TCCConversion__Functions_HH
#define TCCConversion__Functions_HH

namespace TCCConversion__Functions {

/* Function prototypes */

extern CHARSTRING f__putInLowercase(const CHARSTRING& pl__string);
extern CHARSTRING f__putInUppercase(const CHARSTRING& pl__string);
extern CHARSTRING f__unichar2charstr(const UNIVERSAL_CHARSTRING& p__unichar);
extern UNIVERSAL_CHARSTRING f__charstr2unichar(const CHARSTRING& p__char);
extern CHARSTRING f__replaceFirstOccurenceOfSubstring(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB);
extern CHARSTRING f__replaceEveryOccurenceOfSubstring(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB);
extern CHARSTRING f__replaceFirstOccurenceOfPattern(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB);
extern CHARSTRING f__replaceEveryOccurenceOfPattern(const CHARSTRING& parInStr, const CHARSTRING& parSubStrA, const CHARSTRING& parSubStrB);
extern OCTETSTRING f__addOctetstring(const OCTETSTRING& par1, const OCTETSTRING& par2);
extern OCTETSTRING f__subOctetstring(const OCTETSTRING& par1, const OCTETSTRING& par2);
extern INTEGER f__compOctetstring(const OCTETSTRING& par1, const OCTETSTRING& par2);
extern CHARSTRING f__substr__token(const CHARSTRING& str, const CHARSTRING& begin__token, const CHARSTRING& end__token);
extern OCTETSTRING f__substr__token__oct(const OCTETSTRING& str, const OCTETSTRING& begin__token, const OCTETSTRING& end__token);
extern TCC__Conversion__ch__list f__substr__all__tokens(const CHARSTRING& str, const CHARSTRING& begin__token, const CHARSTRING& end__token);
extern TCC__Conversion__ch__list f__substr__all__tokens__oct(const OCTETSTRING& str, const OCTETSTRING& begin__token, const OCTETSTRING& end__token);
extern INTEGER f__strstr(const CHARSTRING& s1, const CHARSTRING& s2, const INTEGER& offset);
extern INTEGER f__strstr__oct(const OCTETSTRING& s1, const OCTETSTRING& s2, const INTEGER& offset);
extern OCTETSTRING f__OctetIpv4(const CHARSTRING& pl__ip);
extern OCTETSTRING f__convertIPAddrToBinary(const CHARSTRING& pl__ip);
extern CHARSTRING f__convertBinaryToIPAddr(const OCTETSTRING& pl__ip);
extern BOOLEAN f__oct2char__safe(const OCTETSTRING& par1, CHARSTRING& par2);
extern CHARSTRING f__IPv6CreateLiteral(const CHARSTRING& pl__ip);
extern CHARSTRING f__isNumber(const CHARSTRING& pl__string, INTEGER& pl__number);
extern BOOLEAN f__isWhiteSpace(const CHARSTRING& pl__str);
extern CHARSTRING f__stripWhitespaces(const CHARSTRING& pl__str);
extern BOOLEAN f__isInteger(const CHARSTRING& pl__str);
extern INTEGER f__str2int(const CHARSTRING& pl__str);
extern BOOLEAN f__prePadString(const CHARSTRING& pl__string, const CHARSTRING& pl__pad, const INTEGER& pl__length, CHARSTRING& pl__result);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t TCC__Conversion__ch__list_descr_;
extern const XERdescriptor_t TCC__Conversion__ch__list_0_xer_;
extern const TTCN_JSONdescriptor_t TCC__Conversion__ch__list_0_json_;
extern const TTCN_Typedescriptor_t TCC__Conversion__ch__list_0_descr_;
extern const TCC__Conversion__ch__list& TCC__Converion__ch__empty__list;
extern const INTEGER& f__strstr_offset_defval;
extern const INTEGER& f__strstr__oct_offset_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
