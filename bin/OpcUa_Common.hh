// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R3A
// for AvdootChalke (avdootchalke@avdootchalke-VirtualBox) on Thu Jul 26 15:22:27 2018

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef OpcUa__Common_HH
#define OpcUa__Common_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef OpcUa__Common_HH
#endif

namespace OpcUa__Common {

/* Forward declarations of classes */

class CommonServiceResultCodes;
class CommonServiceResultCodes_template;
class CommonOperationLevelResultCodes;
class CommonOperationLevelResultCodes_template;

} /* end of namespace */

#ifndef OpcUa__Common_HH
#define OpcUa__Common_HH

namespace OpcUa__Common {

/* Class definitions */

class CommonServiceResultCodes : public Base_Type { // enum
friend class CommonServiceResultCodes_template;
public:
enum enum_type { Good = 0, Good__CompletesAsynchronously = 1, Good__SubscriptionTransferred = 2, Bad__CertificateHostNameInvalid = 3, Bad__CertificateChainIncomplete = 4, Bad__CertificateIssuerRevocationUnknown = 5, Bad__CertificateIssuerUseNotAllowed = 6, Bad__CertificateIssuerTimeInvalid = 7, Bad__CertificateIssuerRevoked = 8, Bad__CertificateInvalid = 9, Bad__CertificateRevocationUnknown = 10, Bad__CertificateRevoked = 11, Bad__CertificateTimeInvalid = 12, Bad__CertificateUriInvalid = 13, Bad__CertificateUntrusted = 14, Bad__CertificateUseNotAllowed = 15, Bad__CommunicationError = 16, Bad__DataTypeIdUnknown = 17, Bad__DecodingError = 18, Bad__EncodingError = 19, Bad__EncodingLimitsExceeded = 20, Bad__IdentityTokenInvalid = 21, Bad__IdentityTokenRejected = 22, Bad__InternalError = 23, Bad__InvalidArgument = 24, Bad__InvalidState = 25, Bad__InvalidTimestamp = 26, Bad__LicenseExpired = 27, Bad__LicenseLimitsExceeded = 28, Bad__LicenseNotAvailable = 29, Bad__NothingToDo = 30, Bad__OutOfMemory = 31, Bad__RequestCancelledByClient = 32, Bad__RequestTooLarge = 33, Bad__ResponseTooLarge = 34, Bad__RequestHeaderInvalid = 35, Bad__ResourceUnavailable = 36, Bad__SecureChannelIdInvalid = 37, Bad__SecurityChecksFailed = 38, Bad__ServerHalted = 39, Bad__ServerNotConnected = 40, Bad__ServerUriInvalid = 41, Bad__ServiceUnsupported = 42, Bad__SessionIdInvalid = 43, Bad__SessionClosed = 44, Bad__SessionNotActivated = 45, Bad__Shutdown = 46, Bad__SubscriptionIdInvalid = 47, Bad__Timeout = 48, Bad__TimestampsToReturnInvalid = 49, Bad__TooManyOperations = 50, Bad__UnexpectedError = 51, Bad__UnknownResponse = 52, Bad__UserAccessDenied = 53, Bad__ViewIdUnknown = 54, Bad__ViewTimestampInvalid = 55, Bad__ViewParameterMismatchInvalid = 56, Bad__ViewVersionInvalid = 57, UNKNOWN_VALUE = 58, UNBOUND_VALUE = 59 };
private:
enum_type enum_value;

public:
CommonServiceResultCodes();
CommonServiceResultCodes(int other_value);
CommonServiceResultCodes(enum_type other_value);
CommonServiceResultCodes(const CommonServiceResultCodes& other_value);

CommonServiceResultCodes& operator=(int other_value);
CommonServiceResultCodes& operator=(enum_type other_value);
CommonServiceResultCodes& operator=(const CommonServiceResultCodes& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const CommonServiceResultCodes& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const CommonServiceResultCodes& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const CommonServiceResultCodes& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const CommonServiceResultCodes& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const CommonServiceResultCodes& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const CommonServiceResultCodes& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const CommonServiceResultCodes& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class CommonServiceResultCodes_template : public Base_Template {
union {
CommonServiceResultCodes::enum_type single_value;
struct {
unsigned int n_values;
CommonServiceResultCodes_template *list_value;
} value_list;
};

void copy_template(const CommonServiceResultCodes_template& other_value);

public:
CommonServiceResultCodes_template();
CommonServiceResultCodes_template(template_sel other_value);
CommonServiceResultCodes_template(int other_value);
CommonServiceResultCodes_template(CommonServiceResultCodes::enum_type other_value);
CommonServiceResultCodes_template(const CommonServiceResultCodes& other_value);
CommonServiceResultCodes_template(const OPTIONAL<CommonServiceResultCodes>& other_value);
CommonServiceResultCodes_template(const CommonServiceResultCodes_template& other_value);
~CommonServiceResultCodes_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
CommonServiceResultCodes_template& operator=(template_sel other_value);
CommonServiceResultCodes_template& operator=(int other_value);
CommonServiceResultCodes_template& operator=(CommonServiceResultCodes::enum_type other_value);
CommonServiceResultCodes_template& operator=(const CommonServiceResultCodes& other_value);
CommonServiceResultCodes_template& operator=(const OPTIONAL<CommonServiceResultCodes>& other_value);
CommonServiceResultCodes_template& operator=(const CommonServiceResultCodes_template& other_value);

boolean match(CommonServiceResultCodes::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const CommonServiceResultCodes& other_value, boolean legacy = FALSE) const;
CommonServiceResultCodes::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
CommonServiceResultCodes_template& list_item(unsigned int list_index);
void log() const;
void log_match(const CommonServiceResultCodes& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class CommonOperationLevelResultCodes : public Base_Type { // enum
friend class CommonOperationLevelResultCodes_template;
public:
enum enum_type { Good__Clamped = 0, Good__Overload = 1, Uncertain = 2, Bad = 3, Bad__AttributeIdInvalid = 4, Bad__BrowseDirectionInvalid = 5, Bad__BrowseNameInvalid = 6, Bad__ContentFilterInvalid = 7, Bad__ContinuationPointInvalid = 8, Bad__DataEncodingInvalid = 9, Bad__DataEncodingUnsupported = 10, Bad__EventFilterInvalid = 11, Bad__FilterNotAllowed = 12, Bad__FilterOperandInvalid = 13, Bad__HistoryOperationInvalid = 14, Bad__HistoryOperationUnsupported = 15, Bad__IndexRangeInvalid = 16, Bad__IndexRangeNoData = 17, Bad__MonitoredItemFilterInvalid = 18, Bad__MonitoredItemFilterUnsupported = 19, Bad__MonitoredItemIdInvalid = 20, Bad__MonitoringModeInvalid = 21, Bad__NoCommunication = 22, Bad__NoContinuationPoints = 23, Bad__NodeClassInvalid = 24, Bad__NodeIdInvalid = 25, Bad__NodeIdUnknown = 26, Bad__NoDeleteRights = 27, Bad__NodeNotInView = 28, Bad__NotFound = 29, Bad__NotImplemented = 30, Bad__NotReadable = 31, Bad__NotSupported = 32, Bad__NotWritable = 33, Bad__ObjectDeleted = 34, Bad__OutOfRange = 35, Bad__ReferenceTypeIdInvalid = 36, Bad__SecurityModeInsufficient = 37, Bad__SourceNodeIdInvalid = 38, Bad__StructureMissing = 39, Bad__TargetNodeIdInvalid = 40, Bad__TypeDefinitionInvalid = 41, Bad__TypeMismatch = 42, Bad__WaitingForInitialData = 43, UNKNOWN_VALUE = 44, UNBOUND_VALUE = 45 };
private:
enum_type enum_value;

public:
CommonOperationLevelResultCodes();
CommonOperationLevelResultCodes(int other_value);
CommonOperationLevelResultCodes(enum_type other_value);
CommonOperationLevelResultCodes(const CommonOperationLevelResultCodes& other_value);

CommonOperationLevelResultCodes& operator=(int other_value);
CommonOperationLevelResultCodes& operator=(enum_type other_value);
CommonOperationLevelResultCodes& operator=(const CommonOperationLevelResultCodes& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const CommonOperationLevelResultCodes& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const CommonOperationLevelResultCodes& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const CommonOperationLevelResultCodes& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const CommonOperationLevelResultCodes& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const CommonOperationLevelResultCodes& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const CommonOperationLevelResultCodes& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const CommonOperationLevelResultCodes& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class CommonOperationLevelResultCodes_template : public Base_Template {
union {
CommonOperationLevelResultCodes::enum_type single_value;
struct {
unsigned int n_values;
CommonOperationLevelResultCodes_template *list_value;
} value_list;
};

void copy_template(const CommonOperationLevelResultCodes_template& other_value);

public:
CommonOperationLevelResultCodes_template();
CommonOperationLevelResultCodes_template(template_sel other_value);
CommonOperationLevelResultCodes_template(int other_value);
CommonOperationLevelResultCodes_template(CommonOperationLevelResultCodes::enum_type other_value);
CommonOperationLevelResultCodes_template(const CommonOperationLevelResultCodes& other_value);
CommonOperationLevelResultCodes_template(const OPTIONAL<CommonOperationLevelResultCodes>& other_value);
CommonOperationLevelResultCodes_template(const CommonOperationLevelResultCodes_template& other_value);
~CommonOperationLevelResultCodes_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
CommonOperationLevelResultCodes_template& operator=(template_sel other_value);
CommonOperationLevelResultCodes_template& operator=(int other_value);
CommonOperationLevelResultCodes_template& operator=(CommonOperationLevelResultCodes::enum_type other_value);
CommonOperationLevelResultCodes_template& operator=(const CommonOperationLevelResultCodes& other_value);
CommonOperationLevelResultCodes_template& operator=(const OPTIONAL<CommonOperationLevelResultCodes>& other_value);
CommonOperationLevelResultCodes_template& operator=(const CommonOperationLevelResultCodes_template& other_value);

boolean match(CommonOperationLevelResultCodes::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const CommonOperationLevelResultCodes& other_value, boolean legacy = FALSE) const;
CommonOperationLevelResultCodes::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
CommonOperationLevelResultCodes_template& list_item(unsigned int list_index);
void log() const;
void log_match(const CommonOperationLevelResultCodes& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const INTEGER& Bad__TcpServerTooBusy;
extern const INTEGER& Bad__TcpMessageTypeInvalid;
extern const INTEGER& Bad__TcpSecureChannelUnknown;
extern const INTEGER& Bad__TcpMessageTooLarge;
extern const INTEGER& Bad__Timeout;
extern const INTEGER& Bad__TcpNotEnoughResources;
extern const INTEGER& Bad__TcpInternalError;
extern const INTEGER& Bad__TcpEndpointUrlInvalid;
extern const INTEGER& Bad__SecurityChecksFailed;
extern const INTEGER& Bad__RequestInterrupted;
extern const INTEGER& Bad__RequestTimeout;
extern const INTEGER& Bad__SecureChannelClosed;
extern const INTEGER& Bad__SecureChannelTokenUnknown;
extern const INTEGER& Bad__CertificateUntrusted;
extern const INTEGER& Bad__CertificateTimeInvalid;
extern const INTEGER& Bad__CertificateIssuerTimeInvalid;
extern const INTEGER& Bad__CertificateUseNotAllowed;
extern const INTEGER& Bad__CertificateIssuerUseNotAllowed;
extern const INTEGER& Bad__CertificateRevocationUnknown;
extern const INTEGER& Bad__CertificateIssuerRevocationUnknown;
extern const INTEGER& Bad__CertificateRevoked;
extern const TTCN_Typedescriptor_t CommonServiceResultCodes_descr_;
extern const TTCN_Typedescriptor_t CommonOperationLevelResultCodes_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
